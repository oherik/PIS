QA12 - MC68HC12 Absolute crossassembler, Version 1.6.3
(c) GMV 1989-2013


File: Subroutines.lst
                            1. 		#define	SIMUATOR
---- File: "C:\Users\Erik\Documents\GitHub\PIS\Bokuppgifter\Subroutines.s12"
                            2. 		use	Labdefs.s12
---- File: "Labdefs.s12"
                            3. ;Adresser
       0000 0600            4. DipSwitch	equ	$600
       0000 0700            5. HexDisplay	equ	$700
       0000 0400            6. DrillControl	equ	$400
       0000 0401            7. DrillStatus	equ	$401
                            8. 
000000                      9. #ifdef	SIMULATOR
                           15. #else
       0000 0004           16. DelayConst	EQU	4
                           17. #endif                           18. 		use	Delay.s12
---- File: "Delay.s12"
000000                     19. #ifdef	RUNFAST
                           21. #else
       0000 0001           22. DelayConstant	equ	1	;Minimum number for the constant, the delay will however be too long
                           23. #endif
000000                     24. 	
002000                     25. 	org	$2000
002000 34                  26. Delay:	pshx
002001 35                  27. 	pshy
002002 CE 00 01            28. 	ldx	#DelayConstant
002005 1A 1F               29. NEXT:	leax	-1,x
002007 CD 00 64            30. 	ldy	#100
00200A 19 5F               31. NEXT2:	leay	-1,y
00200C 8D 00 00            32. 	cpy	#0
00200F 26 F9               33. 	bne	NEXT2
002011 8E 00 00            34. 	cpx	#0
002014 26 EF               35. 	bne	NEXT
002016 31                  36. 	puly
002017 30                  37. 	pulx
002018 3D                  38. 	rts	       0000 0401           39. InPort		equ	$0401	; Läsa in?
---- File: "C:\Users\Erik\Documents\GitHub\PIS\Bokuppgifter\Subroutines.s12"
       0000 0400           40. OutPort		equ	$0400	; Läsa in?
                           41. 
001000                     42. 		org	$1000	
001000 00                  43. DCShadow	rmb	1	; DrillControl shadow
001001 C6 00               44. Start:		ldab	#$00
001003 7B 10 00            45. 		stab	DCShadow
001006                     46. 		
001006 F6 04 01            47. Loop:		ldab	InPort
001009 16 10 34            48. 		jsr	Outone
00100C                     49. 		
00100C B6 10 00            50. 		ldaa	DCShadow
00100F 7A 04 00            51. 		staa	OutPort
001012                     52. 		
001012 06 10 01            53. 		jmp	Start		
001015                     54. 		
                           55. ;---------------------------------
                           56. ;	OUTZERO
                           57. ;---------------------------------
                           58. ; Nollställ biten i B-registrer, med förprogrammerade bitmönster
001015 36                  59. Outzero:	psha			; Lägg register på stacken för senare återställning
001016 39                  60. 		pshc	
001017 37                  61. 		pshb
001018 C1 07               62. 		cmpb	#7		
00101A 22 14               63. 		bhi	Outzero_return	; Kolla om talet är >7
00101C CE 10 C3            64. 		ldx	#Bitmask
00101F                     65. Outzero_loop:
00101F                     66. 		ldab	b,x
001021 51                  67. 		comb	
001022 37                  68. 		pshb
001023 B6 10 00            69. 		ldaa	DCShadow
001026                     70. 		anda	0,sp		; Ta DCShadow && B
001028 1B 81               71. 		leas	1,sp
00102A 7A 04 00            72. 		staa	DrillControl	; Spara till borren
00102D 7A 10 00            73. 		staa	DCShadow	; Spara till skuggningen
001030                     74. Outzero_return:	
001030 33                  75. 		pulb			; Återställ originalvärden
001031 38                  76. 		pulc
001032 32                  77. 		pula
001033 3D                  78. 		rts
001034                     79. 	
                           80. ;---------------------------------
                           81. ;	OUTONE
                           82. ;---------------------------------
                           83. 
                           84. ; Ettställ biten i B-registrer, med förprogrammerade bitmönster
001034 36                  85. Outone:		psha			; Lägg register på stacken för senare återställning
001035 39                  86. 		pshc	
001036 37                  87. 		pshb
001037 C1 07               88. 		cmpb	#7		
001039 22 13               89. 		bhi	Outone_return	; Kolla om talet är >7
00103B CE 10 C3            90. 		ldx	#Bitmask
00103E                     91. Outone_loop:
00103E                     92. 		ldab	b,x	
001040 37                  93. 		pshb
001041 B6 10 00            94. 		ldaa	DCShadow
001044                     95. 		oraa	0,sp		; Ta DCShadow || B
001046 1B 81               96. 		leas	1,sp
001048 7A 04 00            97. 		staa	DrillControl	; Spara till borren
00104B 7A 10 00            98. 		staa	DCShadow	; Spara till skuggningen
00104E                     99. Outone_return:	
00104E 33                 100. 		pulb			; Återställ originalvärden
00104F 38                 101. 		pulc
001050 32                 102. 		pula
001051 3D                 103. 		rts
001052                    104. 		
                          105. ; Ettställ biten i B-registret
001052 36                 106. Outone_old:		psha			; Lägg register på stacken för senare återställning
001053 39                 107. 		pshc	
001054 37                 108. 		pshb
001055 D7                 109. 		tstb
001056 2B 1A              110. 		bmi	Outone_old_return	; Kolla om talet är <0
001058 C0 08              111. 		subb	#8		
00105A 2A 16              112. 		bpl	Outone_old_return	; Kolla om talet är >7
00105C                    113. 		ldab	0,sp
00105E                    114. 		
00105E 86 01              115. 		ldaa	#1		; Påbörjat bitmönster för B. Kommer som minst vara 1 (bit 0)
001060                    116. 		
001060                    117. Outone_old_loop:	
001060 D7                 118. 		tstb
001061 26 13              119. 		bne	Outone_old_loop_nonzero	; B har fortfarande ett värde
001063 F6 10 00           120. 		ldab	DCShadow		
001066 41                 121. 		coma			; A<- A:s komplement
001067 36                 122. 		psha			; Lägg A:s värde på stacken. A är nu bitmönstret för original-B
001068                    123. 		orab	0,sp		; Ta DCShadow || B
00106A 1B 81              124. 		leas	1,sp
00106C 7B 04 00           125. 		stab	DrillControl	; Spara till borren
00106F 7B 10 00           126. 		stab	DCShadow	; Spara till skuggningen
001072 33                 127. Outone_old_return:	pulb			; Återställ originalvärden
001073 38                 128. 		pulc
001074 32                 129. 		pula
001075 3D                 130. 		rts
001076                    131. 		
001076                    132. Outone_old_loop_nonzero:	
001076 48                 133. 		asla			; Multiplicera A med två
001077 53                 134. 		decb		
001078 20 E6              135. 		bra	Outone_old_loop
00107A                    136. 		
00107A                    137. 		
                          138. ;-------------------------------
                          139. ;	MOTORSTART
                          140. ;-------------------------------
                          141. 
00107A                    142. MotorStart:
00107A 36                 143. 	psha
00107B B6 10 00           144. 	ldaa	DCShadow
00107E 84 04              145. 	anda	#4
001080 26 17              146. 	bne	MotorStartExit	; Motorn redan startad
001082 86 04              147. 	ldaa	#4
001084 BB 10 00           148. 	adda	DCShadow
001087 7A 04 00           149. 	staa	DrillControl
00108A 16 20 00           150. 	jsr	Delay		; 4*250ms fördröjning
00108D 16 20 00           151. 	jsr	Delay
001090 16 20 00           152. 	jsr	Delay
001093 16 20 00           153. 	jsr	Delay
001096 7A 10 00           154. 	staa	DCShadow
                          155. 
001099                    156. MotorStartExit:
001099 32                 157. 	pula
00109A 3D                 158. 	rts
00109B                    159. 	
00109B                    160. 		
                          161. ; Nollställ biten i B-registrer, gammal version
00109B 36                 162. Outzero_old:	psha			; Lägg register på stacken för senare återställning
00109C 39                 163. 		pshc	
00109D 37                 164. 		pshb
00109E D7                 165. 		tstb
00109F 2B 1A              166. 		bmi	Outzero_old_return	; Kolla om talet är <0
0010A1 C0 08              167. 		subb	#8		
0010A3 2A 16              168. 		bpl	Outzero_old_return	; Kolla om talet är >7
0010A5                    169. 		ldab	0,sp
0010A7                    170. 		
0010A7 86 01              171. 		ldaa	#1		; Påbörjat bitmönster för B. Kommer som minst vara 1 (bit 0)
0010A9                    172. 		
0010A9                    173. Outzero_old_loop:	
0010A9 D7                 174. 		tstb
0010AA 26 13              175. 		bne	Outzero_old_loop_nonzero	; B har fortfarande ett värde
0010AC F6 10 00           176. 		ldab	DCShadow		
0010AF 41                 177. 		coma			; A<- A:s komplement
0010B0 36                 178. 		psha			; Lägg A:s värde på stacken. A är nu bitmönstret för original-B
0010B1                    179. 		andb	0,sp		; Ta DCShadow && A
0010B3 1B 81              180. 		leas	1,sp
0010B5 7B 04 00           181. 		stab	DrillControl	; Spara till borren
0010B8 7B 10 00           182. 		stab	DCShadow	; Spara till skuggningen
0010BB                    183. Outzero_old_return:	
0010BB 33                 184. 		pulb			; Återställ originalvärden
0010BC 38                 185. 		pulc
0010BD 32                 186. 		pula
0010BE 3D                 187. 		rts
0010BF                    188. 		
0010BF                    189. Outzero_old_loop_nonzero:	
0010BF 48                 190. 		asla			; Multiplicera A med två
0010C0 53                 191. 		decb		
0010C1 20 E6              192. 		bra	Outzero_old_loop
0010C3                    193. 		
                          194. ; Bitmasks
0010C3 01 02 04 08 10 20  195. Bitmask:	fcb	1,2,4,8,16,32,64,128
       40 80            
0010CB                    196. 		
                          197. 
0010CB                    198. 		
0010CB                    199. 	
0010CB                    200. 		
0010CB                    201. 		