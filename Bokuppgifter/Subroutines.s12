		#define	SIMUATOR
		use	Labdefs.s12
		use	Delay.s12
InPort		equ	$0401	; Läsa in?
;OutPort		equ	$0400	; Läsa in?

		org	$1000	
DCShadow	rmb	1	; DrillControl shadow
Start:		ldab	#$00
		stab	DCShadow
		
Loop:		ldab	InPort
		jsr	Outone
		
		ldaa	DCShadow
		;staa	OutPort
		
		jmp	Start		
		
;---------------------------------
;	OUTZERO
;---------------------------------

; Nollställ biten i B-registret, med förprogrammerade bitmönster

Outzero:			
		pshc	; Lägg register på stacken för senare återställning
		pshb
		cmpb	#7		
		bhi	Outzero_return	; Kolla om talet är >7
		ldx	#Bitmask
Outzero_loop:
		ldab	b,x				; Uppdatera b till bitmasken för b
		comb	
		andb	DCShadow		; Ta DCShadow && komplementet av bitmasken
		stab	DrillControl	; Spara till borren
		stab	DCShadow	; Spara till skuggningen
Outzero_return:	
		pulb			; Återställ originalvärden
		pulc
		rts
	
;---------------------------------
;	OUTONE
;---------------------------------

; Ettställ biten i B-registret, med förprogrammerade bitmönster

Outone:			
		pshc	; Lägg register på stacken för senare återställning
		pshb
		cmpb	#7		
		bhi	Outone_return	; Kolla om talet är >7
		ldx	#Bitmask
Outone_loop:
		ldab	b,x	
		orab	DCShadow	; Ta DCShadow || Bitmasken
		stab	DrillControl	; Spara till borren
		stab	DCShadow	; Spara till skuggningen
Outone_return:	
		pulb			; Återställ originalvärden
		pulc
		rts
		
;-------------------------------
;	MOTORSTART
;-------------------------------

MotorStart:
	pshb
	ldab	DCShadow
	andb	#4
	bne	MotorStartExit	; Motorn redan startad
	ldab	#2
	jsr	Outone		; Ettställ bit 2
	jsr	DELAY		; 4*250ms fördröjning
	jsr	DELAY
	jsr	DELAY
	jsr	DELAY

MotorStartExit:
	pulb
	rts
	
;-------------------------------
;	MOTORSTOP
;-------------------------------

MotorStop:
	pshb
	ldab	#2
	jsr	Outzero		; Nollställ bit 2
	pulb
	rts
	
;-------------------------------	
;	Bitmasks
;-------------------------------

Bitmask:	fcb	1,2,4,8,16,32,64,128
		

		
	
		
		
