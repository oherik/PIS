		#define	SIMUATOR
		use	Labdefs.s12
		use	Delay.s12
InPort		equ	$0401	; Läsa in?
OutPort		equ	$0400	; Läsa in?

		org	$1000	
DCShadow	rmb	1	; DrillControl shadow
Start:		ldab	#$00
		stab	DCShadow
		
Loop:		ldab	InPort
		jsr	Outone
		
		ldaa	DCShadow
		staa	OutPort
		
		jmp	Start		
		
;---------------------------------
;	OUTZERO
;---------------------------------
; Nollställ biten i B-registrer, med förprogrammerade bitmönster
Outzero:	psha			; Lägg register på stacken för senare återställning
		pshc	
		pshb
		cmpb	#7		
		bhi	Outzero_return	; Kolla om talet är >7
		ldx	#Bitmask
Outzero_loop:
		ldab	b,x
		comb	
		pshb
		ldaa	DCShadow
		anda	0,sp		; Ta DCShadow && B
		leas	1,sp
		staa	DrillControl	; Spara till borren
		staa	DCShadow	; Spara till skuggningen
Outzero_return:	
		pulb			; Återställ originalvärden
		pulc
		pula
		rts
	
;---------------------------------
;	OUTONE
;---------------------------------

; Ettställ biten i B-registrer, med förprogrammerade bitmönster
Outone:		psha			; Lägg register på stacken för senare återställning
		pshc	
		pshb
		cmpb	#7		
		bhi	Outone_return	; Kolla om talet är >7
		ldx	#Bitmask
Outone_loop:
		ldab	b,x	
		pshb
		ldaa	DCShadow
		oraa	0,sp		; Ta DCShadow || B
		leas	1,sp
		staa	DrillControl	; Spara till borren
		staa	DCShadow	; Spara till skuggningen
Outone_return:	
		pulb			; Återställ originalvärden
		pulc
		pula
		rts
		
;-------------------------------
;	MOTORSTART
;-------------------------------

MotorStart:
	psha
	ldaa	DCShadow
	anda	#4
	bne	MotorStartExit	; Motorn redan startad
	ldaa	#2
	psha
	jsr	Outone		; Ettställ bit 2	
	jsr	Delay		; 4*250ms fördröjning
	jsr	Delay
	jsr	Delay
	jsr	Delay

MotorStartExit:
	pula
	rts
;-------------------------------
;	MOTORSTOPP
;-------------------------------

MotorStopp
	psha
	ldaa	#2
	psha
	jsr	Outzero		; Nollställ bit 2
	pula
	rts
	
;-------------------------------	
;	Bitmasks
;-------------------------------

Bitmask:	fcb	1,2,4,8,16,32,64,128
		

		
	
		
		