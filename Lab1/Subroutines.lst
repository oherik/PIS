QA12 - MC68HC12 Absolute crossassembler, Version 1.6.3
(c) GMV 1989-2013


File: Subroutines.lst
                            1. 		#define	SIMUATOR
---- File: "C:\Users\Erik\Documents\GitHub\PIS\Lab1\Subroutines.s12"
                            2. 		use	Labdefs.s12
---- File: "Labdefs.s12"
                            3. ;Adresser
       0000 0600            4. DipSwitch	equ	$600
       0000 0700            5. HexDisplay	equ	$700
       0000 0400            6. DrillControl	equ	$400
                            7. 
                            8. 
000000                      9. #ifdef	SIMULATOR
                           16. #else
       0000 0600           17. DrillStatus	equ	$600
       0000 0004           18. DelayConst	EQU	4
                           19. #endif
       0000 0401           20. InPort		equ	$0401	; Läsa in?
---- File: "C:\Users\Erik\Documents\GitHub\PIS\Lab1\Subroutines.s12"
       0000 0400           21. OutPort		equ	$0400	; Läsa in?
                           22. 
001000                     23. 		org	$1000	
001000 00                  24. DCShadow	rmb	1	; DrillControl shadow
001001 C6 FF               25. Start:		ldab	#$FF
001003 7B 10 00            26. 		stab	DCShadow
001006                     27. 		
001006 F6 04 01            28. Loop:		ldab	InPort
001009 16 10 15            29. 		jsr	Outzero
00100C                     30. 		
00100C B6 10 00            31. 		ldaa	DCShadow
00100F 7A 04 00            32. 		staa	OutPort
001012                     33. 		
001012 06 10 01            34. 		jmp	Start		
001015                     35. 		
001015                     36. 		
                           37. ; Nollställ biten i B-registret
001015 36                  38. Outzero:	psha			; Lägg register på stacken för senare återställning
001016 39                  39. 		pshc	
001017 37                  40. 		pshb
001018 D7                  41. 		tstb
001019 2B 1A               42. 		bmi	Outzero_return	; Kolla om talet är <0
00101B C0 08               43. 		subb	#8		
00101D 2A 16               44. 		bpl	Outzero_return	; Kolla om talet är >7
00101F                     45. 		ldab	0,sp
001021                     46. 		
001021 86 01               47. 		ldaa	#1		; Påbörjat bitmönster för B. Kommer som minst vara 1 (bit 0)
001023                     48. 		
001023                     49. Outzero_loop:	
001023 D7                  50. 		tstb
001024 26 13               51. 		bne	Outzero_loop_nonzero	; B har fortfarande ett värde
001026 F6 10 00            52. 		ldab	DCShadow		
001029 41                  53. 		coma			; A<- A:s komplement
00102A 36                  54. 		psha			; Lägg A:s värde på stacken. A är nu bitmönstret för original-B
00102B                     55. 		andb	0,sp		; Ta DCShadow && A
00102D 1B 81               56. 		leas	1,sp
00102F 7B 04 00            57. 		stab	DrillControl	; Spara till borren
001032 7B 10 00            58. 		stab	DCShadow	; Spara till skuggningen
001035 33                  59. Outzero_return:	pulb			; Återställ originalvärden
001036 38                  60. 		pulc
001037 32                  61. 		pula
001038 3D                  62. 		rts
001039                     63. 		
001039                     64. Outzero_loop_nonzero:	
001039 48                  65. 		asla			; Multiplicera A med två
00103A 53                  66. 		decb		
00103B 20 E6               67. 		bra	Outzero_loop
00103D                     68. 		
00103D                     69. 		
00103D                     70. 	
00103D                     71. 		