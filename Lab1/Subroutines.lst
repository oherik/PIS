QA12 - MC68HC12 Absolute crossassembler, Version 1.6.3
(c) GMV 1989-2013


File: Subroutines.lst
                            1. 		#define	SIMUATOR
---- File: "C:\Users\Erik\Documents\GitHub\PIS\Lab1\Subroutines.s12"
                            2. 		use	Labdefs.s12
---- File: "Labdefs.s12"
                            3. ;Adresser
       0000 0600            4. DipSwitch	equ	$600
       0000 0700            5. HexDisplay	equ	$700
       0000 0400            6. DrillControl	equ	$400
                            7. 
                            8. 
000000                      9. #ifdef	SIMULATOR
                           16. #else
       0000 0600           17. DrillStatus	equ	$600
       0000 0004           18. DelayConst	EQU	4
                           19. #endif
       0000 0401           20. InPort		equ	$0401	; Läsa in?
---- File: "C:\Users\Erik\Documents\GitHub\PIS\Lab1\Subroutines.s12"
       0000 0400           21. OutPort		equ	$0400	; Läsa in?
                           22. 
001000                     23. 		org	$1000	
001000 00                  24. DCShadow	rmb	1	; DrillControl shadow
001001 C6 FF               25. Start:		ldab	#$FF
001003 7B 10 00            26. 		stab	DCShadow
001006                     27. 		
001006 F6 04 01            28. Loop:		ldab	InPort
001009 16 10 3C            29. 		jsr	Outzero
00100C                     30. 		
00100C B6 10 00            31. 		ldaa	DCShadow
00100F 7A 04 00            32. 		staa	OutPort
001012                     33. 		
001012 06 10 01            34. 		jmp	Start		
001015                     35. 		
001015                     36. 		
                           37. ; Ettställ biten i B-registret
001015 36                  38. Outone:		psha			; Lägg register på stacken för senare återställning
001016 39                  39. 		pshc	
001017 37                  40. 		pshb
001018 D7                  41. 		tstb
001019 2B 19               42. 		bmi	Outone_return	; Kolla om talet är <0
00101B C0 08               43. 		subb	#8		
00101D 2A 15               44. 		bpl	Outone_return	; Kolla om talet är >7
00101F                     45. 		ldab	0,sp
001021                     46. 		
001021 86 01               47. 		ldaa	#1		; Påbörjat bitmönster för B. Kommer som minst vara 1 (bit 0)
001023                     48. 		
001023                     49. Outone_loop:	
001023 D7                  50. 		tstb
001024 26 12               51. 		bne	Outone_loop_nonzero	; B har fortfarande ett värde
001026 F6 10 00            52. 		ldab	DCShadow		
001029 36                  53. 		psha			; Lägg A:s värde på stacken. A är nu bitmönstret för original-B
00102A                     54. 		orab	0,sp		; Ta DCShadow || B
00102C 1B 81               55. 		leas	1,sp
00102E 7B 04 00            56. 		stab	DrillControl	; Spara till borren
001031 7B 10 00            57. 		stab	DCShadow	; Spara till skuggningen
001034 33                  58. Outone_return:	pulb			; Återställ originalvärden
001035 38                  59. 		pulc
001036 32                  60. 		pula
001037 3D                  61. 		rts
001038                     62. 		
001038                     63. Outone_loop_nonzero:	
001038 48                  64. 		asla			; Multiplicera A med två
001039 53                  65. 		decb		
00103A 20 E7               66. 		bra	Outone_loop
00103C                     67. 		
                           68. ; Ettställ biten i B-registrer
00103C 36                  69. Outzero:	psha			; Lägg register på stacken för senare återställning
00103D 39                  70. 		pshc	
00103E 37                  71. 		pshb
00103F D7                  72. 		tstb
001040 2B 19               73. 		bmi	Outzero_return	; Kolla om talet är <0
001042 C0 08               74. 		subb	#8		
001044 2A 15               75. 		bpl	Outzero_return	; Kolla om talet är >7
001046                     76. 		ldab	0,sp
001048                     77. 		
001048 86 FE               78. 		ldaa	#$FE		; Påbörjat bitmönster för nollställning. Kommer som minst vara bit 0
00104A                     79. 		
00104A                     80. Outzero_loop:	
00104A D7                  81. 		tstb
00104B 26 12               82. 		bne	Outzero_loop_nonzero	; B har fortfarande ett värde
00104D F6 10 00            83. 		ldab	DCShadow		
001050 36                  84. 		psha			; Lägg A:s värde på stacken. A är nu bitmönstret för original-B
001051                     85. 		andb	0,sp		; Ta DCShadow && A
001053 1B 81               86. 		leas	1,sp
001055 7B 04 00            87. 		stab	DrillControl	; Spara till borren
001058 7B 10 00            88. 		stab	DCShadow	; Spara till skuggningen
00105B 33                  89. Outzero_return:	pulb			; Återställ originalvärden
00105C 38                  90. 		pulc
00105D 32                  91. 		pula
00105E 3D                  92. 		rts
00105F                     93. 		
00105F                     94. Outzero_loop_nonzero:	
00105F 45                  95. 		rola			; Multiplicera A med två
001060 53                  96. 		decb		
001061 20 E7               97. 		bra	Outzero_loop
001063                     98. 		
001063                     99. 		
001063                    100. 	
001063                    101. 		
001063                    102. 		